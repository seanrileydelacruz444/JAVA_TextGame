package game;

import game.Character.*;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.SQLSyntaxErrorException;
import java.util.Scanner;

public class GUI {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Character chosenCharacter = null;
        Character otherChosenCharacter = null;
        SwingUtilities.invokeLater(() -> new GUI    ().createAndShowGUI());

        System.out.println("----- | Choose your character! | -----");
        System.out.println("1. Dorothy");
        System.out.println("2. Quinn");
        System.out.println("3. Noah");
        System.out.println("4. Darwin");
        System.out.println("5. Ace");
        System.out.print("Pick your fighter: ");
        int num = scanner.nextInt();

        //TERMINAL DEMO
        if (num == 1) chosenCharacter = new Dorothy();
        else if (num == 2) chosenCharacter = new Quinn();
        else if (num == 3) chosenCharacter = new Noah();
        else if (num == 4) chosenCharacter = new Darwin();
        else if (num == 5) chosenCharacter = new Ace();
        else {
            System.out.println("Invalid input! There's no character there silly!");
        }

        System.out.println("----- | Choose your ally! | -----");
        System.out.print("Pick another character: ");
        int num2 = scanner.nextInt();

        if (num2 == num) {
            System.out.println(chosenCharacter.name + " is already picked!");
            System.out.println("Please pick a different character: ");
            num2 = scanner.nextInt();
        }

        switch (num2) {
            case 1 -> otherChosenCharacter = new Dorothy();
            case 2 -> otherChosenCharacter = new Quinn();
            case 3 -> otherChosenCharacter = new Noah();
            case 4 -> otherChosenCharacter = new Darwin();
            case 5 -> otherChosenCharacter = new Ace();
            default -> System.out.println("Invalid input! There's no character there silly!");
        }

        if (otherChosenCharacter == null) {
            System.out.println("No valid ally chosen. Game over!");
            return;
        }

        System.out.println(chosenCharacter.name + " and " + otherChosenCharacter.name + " are picked!");
        System.out.println(" ");


        System.out.println("You and " + otherChosenCharacter.name + " are walking and suddenly, you hear a loud... THUD behind you.");
        System.out.println("A soft growl you heard, and you both turn to look at it. You see a monster!!");
        System.out.println(" ");

        System.out.println("Monster: \". . . .\"");
        System.out.println("Monster: Will you be a worthy foe..?");
        System.out.println(" ");

        System.out.println("3..");
        System.out.println(" ");
        System.out.println("2...");
        System.out.println(" ");
        System.out.println("1....");
        System.out.println(" ");
        System.out.println("-------- | BATTLE BEGIN! |-------- ");

        Monster Monster = new Monster();

        int Round = 1;

        do {
            System.out.println("-------- | Round " + Round + " ! |-------- ");
            System.out.println(chosenCharacter.name + "\t HP: " + chosenCharacter.HP + "  MP: " + chosenCharacter.MP);
            System.out.println(otherChosenCharacter.name + "\t HP: " + otherChosenCharacter.HP + "  MP: " + otherChosenCharacter.MP);
            System.out.println(Monster.name + "\t HP: " + Monster.HP + "  MP: " + Monster.MP);
            System.out.println();

            System.out.println("Who will take the move?");
            System.out.println("1. " + chosenCharacter.name);
            System.out.println("2. " + otherChosenCharacter.name);
            System.out.print("Who will attack this turn? ");
            int who = scanner.nextInt();

            Character attacker = null;

            switch(who) {
                case 1 -> attacker = chosenCharacter;
                case 2 -> attacker = otherChosenCharacter;
                default -> System.out.println("Invalid choice!");
            }

            if (attacker == null) continue;

            System.out.println("1. Attack");
            System.out.println("2. Use Skill");
            System.out.print("What would " + attacker.name + " like to do? ");
            int decision = scanner.nextInt();
            System.out.println();

            switch (decision) {
                case 1 -> {
                    Skill attack = new Skill.Attack();
                    attack.use(attacker, Monster);
                }
                case 2 ->{
                    if(attacker instanceof Quinn){
                        attacker.UltimateSkill.use(attacker, chosenCharacter);
                    }
                    attacker.UltimateSkill.use(attacker, Monster);
                }
                default -> System.out.println("Invalid action!");
            }

            if (Monster.HP <= 0) {
                System.out.println(".");
                System.out.println("..");
                System.out.println("...");
                System.out.println("URGH!, Young Warrior... you are strong...");
                System.out.println("THUD!");
                System.out.println();
                System.out.println("----------- | YOU WIN | -----------");
                break;
            }

            System.out.println("----------- | Monster's Turn | -----------");
            Skill monsterAttack = new Skill.Attack();
            monsterAttack.use(Monster, attacker);

            if (attacker.HP <= 0) {
                System.out.println(attacker.name + " has been defeated!");
            }

            Round++;

        } while (Monster.HP > 0 && (chosenCharacter.HP > 0 || otherChosenCharacter.HP > 0));
    }

    public void createAndShowGUI() {
        JFrame frame = new JFrame();
        frame.setSize(900, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().setBackground(Color.black);

        TitlePanel panel = new TitlePanel(frame);
        frame.setLocationRelativeTo(null);
        frame.setContentPane(panel);
        frame.setVisible(true);

        //CHARACTER INITIALIZE
        /*Dorothy dorothy = new Dorothy();
        Quinn quinn = new Quinn();
        Noah noah = new Noah();
        Darwin darwin = new Darwin();
        Ace ace = new Ace();

        System.out.println(dorothy.useUltimateSkill());
        System.out.println(quinn.useUltimateSkill());
        System.out.println(noah.useUltimateSkill());
        System.out.println(darwin.useUltimateSkill());
        System.out.println(ace.useUltimateSkill());*/

    }

    // == LOADING PANEL ==
    class LoadingPanel extends JPanel implements ActionListener {
        private Timer timer;
        private Timer progressTimer;
        private JFrame frame;
        private int progress = 0;
        private int angle = 0;

        public LoadingPanel(JFrame frame) {
            this.frame = frame;
            setLayout(null);
            setBackground(Color.BLACK);
        }

        public void startLoading() {
            timer = new Timer(50, e -> {
                angle = (angle + 5) % 360;
                repaint();
            });
            timer.start();

            progressTimer = new Timer(100, this);
            progressTimer.start();
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.setColor(Color.WHITE);

            for (int i = 0; i < 150; i++) {
                int x = (int) (Math.random() * getWidth());
                int y = (int) (Math.random() * getHeight());
                g.fillRect(x, y, 2, 2);
            }

            drawLoadingWheel(g);

            g.setFont(new Font("Monospaced", Font.BOLD, 30));
            String loadingText = "Starting the semester... " + progress + "%";
            int textWidth = g.getFontMetrics().stringWidth(loadingText);
            int textX = (getWidth() - textWidth) / 2;
            int textY = getHeight() / 2 + 100;
            g.drawString(loadingText, textX, textY);


            int barWidth = 300;
            int barHeight = 20;
            int barX = (getWidth() - barWidth) / 2;
            int barY = getHeight() / 2 + 150;

            g.drawRect(barX, barY, barWidth, barHeight);
            g.fillRect(barX, barY, (barWidth * progress) / 100, barHeight);
        }

        private void drawLoadingWheel(Graphics g) {
            int width = getWidth();
            int height = getHeight();
            int wheelSize = Math.min(width, height) / 3;
            int x = width / 2 - wheelSize / 2;
            int y = height / 3 - wheelSize / 2;

            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.setColor(Color.WHITE);
            g2d.setStroke(new BasicStroke(3f));

            int outerDiameter = wheelSize;
            int innerDiameter = (int)(wheelSize * 0.8);
            int outerRadius = outerDiameter / 2;
            int innerRadius = innerDiameter / 2;

            int centerX = x + outerRadius;
            int centerY = y + outerRadius;

            for(int i = 0; i < 12; i++) {
                double startAngle = Math.toRadians(i * 30 - angle);
                double endAngle = Math.toRadians(i * 30 + 60 - angle);

                int startX = (int) (centerX + outerRadius * Math.cos(startAngle));
                int startY = (int) (centerY + outerRadius * Math.sin(startAngle));
                int endX = (int) (centerX + innerRadius * Math.cos(endAngle));
                int endY = (int) (centerY + innerRadius * Math.sin(endAngle));

                g2d.drawLine(startX, startY, endX, endY);
            }
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            progress += 3;

            if (progress >= 100) {
                timer.stop();
                progressTimer.stop();

                // Transition sa next panel para mag start na ang game
                GameStart gamePanel = new GameStart(frame);// charchar ra ang gamescene, ilisan og actual name sa class
                frame.setContentPane(gamePanel);
                frame.revalidate();
                frame.repaint();
            }

            repaint();
        }

    }

    // === START GAME ===
    class GameStart extends JPanel {
        private JFrame frame;
        private JButton backButton;

        public GameStart(JFrame frame) {
            this.frame = frame;
            setLayout(null);
            setBackground(Color.BLACK);

            // Balik sa main nga screen
            backButton = new JButton("BACK TO MENU");
            backButton.setFont(new Font("Monospaced", Font.BOLD, 20));
            backButton.setBackground(Color.BLACK);
            backButton.setForeground(Color.WHITE);
            backButton.setBorder(BorderFactory.createLineBorder(Color.WHITE));
            backButton.setBounds(30,    30, 200, 40);
            add(backButton);

            backButton.addActionListener(e -> {
                TitlePanel mainPage = new TitlePanel(frame);
                frame.setContentPane(mainPage);
                frame.revalidate();
                frame.repaint();
            });


        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.setColor(Color.WHITE);

            for (int i = 0; i < 150; i++) {
                int x = (int) (Math.random() * getWidth());
                int y = (int) (Math.random() * getHeight());
                g.fillRect(x, y, 2, 2);
            }

            g.setFont(new Font("Monospaced", Font.BOLD, 40));
            g.drawString("Game Start", 300, 300);
        }
    }




    // === TITLE PAGE ===
    class TitlePanel extends JPanel implements ActionListener {

        private Timer timer;
        private JButton startButton, howToPlayButton, quitButton;
        private JFrame frame;

        public TitlePanel(JFrame frame) {
            this.frame = frame;
            setLayout(null);
            setBackground(Color.BLACK);

            // buttons sa title page
            startButton = createButton("START");
            howToPlayButton = createButton("HOW TO PLAY");
            quitButton = createButton("QUIT");

            add(startButton);
            add(howToPlayButton);
            add(quitButton);

            // Kung mo-resize ang window, automatic re-center sa mga buttons
            addComponentListener(new ComponentAdapter() {
                @Override
                public void componentResized(ComponentEvent e) {
                    centerComponents();
                }
            });

            // Button actions para ika click mo lahus sa next action
            //Ge change nako(Tiro) kay para makita ang loading chuchu
            startButton.addActionListener(e -> {

                LoadingPanel loadingPanel = new LoadingPanel(frame);
                frame.setContentPane(loadingPanel);
                frame.revalidate();
                frame.repaint();
                loadingPanel.startLoading();
            });
            //SEAN IKAW LAN BAHALA SUMPAY ARI SA GAMEE SA START BUTTON 🙂
            howToPlayButton.addActionListener(e -> goToHowToPlayPage());
            quitButton.addActionListener(e -> System.exit(0));

            // Timer para i-refresh ang mga starts para mo sidlak sidlak sila
            timer = new Timer(100, this);
            timer.start();
        }

        private JButton createButton(String text) {
            // Method para create ug uniform and neat ang style sa mga buttons para same sila tanan
            JButton button = new JButton(text);
            button.setFocusPainted(false);
            button.setFont(new Font("Monospaced", Font.BOLD, 30));
            button.setBackground(Color.BLACK);
            button.setForeground(Color.WHITE);
            button.setBorder(BorderFactory.createLineBorder(Color.WHITE));
            button.setSize(300, 60);
            return button;
        }

        private void centerComponents() {
            // Function para i-center ang mga buttons sa tunga
            int panelWidth = getWidth();
            int panelHeight = getHeight();

            int buttonWidth = startButton.getWidth();
            int x = (panelWidth - buttonWidth) / 2;
            int yStart = (panelHeight - 200) / 2;

            startButton.setLocation(x, yStart);
            howToPlayButton.setLocation(x, yStart + 80);
            quitButton.setLocation(x, yStart + 160);
        }

        private void goToHowToPlayPage() {
            // Kung i-click ang “How to Play” mo-move to next page which is naa didtu mga info sa duwa 🙂
            HowToPlayPanel nextPage = new HowToPlayPanel(frame);
            frame.setContentPane(nextPage);
            frame.revalidate();
            frame.repaint();
            nextPage.requestFocusInWindow();
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.setColor(Color.WHITE);

            // Drawing sa mga bituon sa background pattern
            for (int i = 0; i < 150; i++) {
                int x = (int) (Math.random() * getWidth());
                int y = (int) (Math.random() * getHeight());
                g.fillRect(x, y, 2, 2);
            }

            // Drawing sa title text and mga fonts niya
            g.setFont(new Font("Monospaced", Font.BOLD, 100));
            FontMetrics fm = g.getFontMetrics();
            String title = "C.O.U.R.S.E";
            int x = (getWidth() - fm.stringWidth(title)) / 2;
            int y = 150;
            g.drawString(title, x, y);

            centerComponents();
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            repaint(); // Para mu-refresh ang stars animation
        }
    }

    // === HOW TO PLAY PAGE ===
    class HowToPlayPanel extends JPanel implements ActionListener {

        private Timer timer;
        private JButton backButton;
        private JFrame frame;
        private JLabel titleLabel;
        private JTextArea textArea;
        private JScrollPane scrollPane;

        public HowToPlayPanel(JFrame frame) {
            this.frame = frame;
            setLayout(null);
            setBackground(Color.BLACK);

            // BACK BUTTON — mobalik sa main menu or sa main page or title screen
            backButton = new JButton("BACK");
            backButton.setFont(new Font("Monospaced", Font.BOLD, 20));
            backButton.setBackground(Color.BLACK);
            backButton.setForeground(Color.WHITE);
            backButton.setBorder(BorderFactory.createLineBorder(Color.WHITE));
            backButton.setBounds(30, 30, 100, 40);
            add(backButton);

            backButton.addActionListener(e -> {
                TitlePanel mainPage = new TitlePanel(frame);
                frame.setContentPane(mainPage);
                frame.revalidate();
                frame.repaint();
                mainPage.requestFocusInWindow();
            });

            // Title label sa ibabaw
            titleLabel = new JLabel("HOW TO PLAY", SwingConstants.CENTER);
            titleLabel.setFont(new Font("Monospaced", Font.BOLD, 40));
            titleLabel.setForeground(Color.WHITE);
            add(titleLabel);

            // Text area para sa full game info ug description
            textArea = new JTextArea(
                    "C.O.U.R.S.E\n\n" +
                            "College Unified Role Playing Students Encounter\n\n" +
                            "DESCRIPTION\n\n" +
                            "A role-playing game where each course is represented by a student with unique skills, " +
                            "abilities, and personalities that mirror their field of study. Join their adventure as " +
                            "they face challenges in the world of college and battle their way through every semester.\n\n" +
                            "CHARACTERS\n\n" +
                            "Char 1: Dorothy (ARCHITECT) — HIGHEST DEFENSE\n" +
                            "Skill 1: T SQUARE – Uses a T square for offense.\n" +
                            "Skill 2: COMPASS – Creates a shield lasting 2 turns.\n" +
                            "Skill 3 (ULTIMATE): SUCCESSFUL FLOOR PLAN – Summons a protective barrier.\n\n" +
                            "Char 2: Quinn (NURSING) — HIGHEST HP\n" +
                            "Skill 1: FIRST AID KIT – Heals a single ally.\n" +
                            "Skill 2: SPRAY BOTTLE – Heals or poisons enemies.\n" +
                            "Skill 3 (ULTIMATE): SYRINGE REVIVE – Revives a downed ally.\n\n" +
                            "Char 3: Noah (I.T.) — HIGHEST SPEED\n" +
                            "Skill 1: CELLPHONE – Fires electric byte strikes.\n" +
                            "Skill 2: CALL VIRUS – Summons a virus entity.\n" +
                            "Skill 3 (ULTIMATE): TRANSFORMATION – Boosts armor and power.\n\n" +
                            "Char 4: Darwin (ENGINEERING) — HIGHEST INTELLECT\n" +
                            "Skill 1: SURVEY CAMERA – Reveals enemy weak points.\n" +
                            "Skill 2: HEAVY CALCULATIONS – Predicts the next enemy move.\n" +
                            "Skill 3 (ULTIMATE): HARD HATS – Provides safety gear to boost party defense.\n\n" +
                            "Char 5: Ace (PSYCHOLOGY) — HIGHEST WISDOM\n" +
                            "Skill 1: PSYCHOLOGY BOOK – Confuses enemies with knowledge.\n" +
                            "Skill 2: UNO REVERSE CARD – Reflects enemy attacks with amplified damage.\n" +
                            "Skill 3 (ULTIMATE): EXISTENTIAL CRISIS – Inflicts confusion for 4 turns.\n\n"
            );

            // Text styling
            textArea.setFont(new Font("Monospaced", Font.PLAIN, 16));
            textArea.setForeground(Color.WHITE);
            textArea.setBackground(Color.BLACK);
            textArea.setEditable(false);
            textArea.setLineWrap(true);
            textArea.setWrapStyleWord(true);

            // Scroll pane para makita tanan text kung taas or sa ubos
            scrollPane = new JScrollPane(textArea);
            scrollPane.setBorder(null);
            scrollPane.getVerticalScrollBar().setUnitIncrement(15);
            add(scrollPane);

            // Kung i-resize ang window, mu-center gihapon ang content para kuan ba murag mobile view dimaguba format
            addComponentListener(new ComponentAdapter() {
                @Override
                public void componentResized(ComponentEvent e) {
                    centerContent();
                }
            });

            // Timer para sa star animation para mo sidlak
            timer = new Timer(100, this);
            timer.start();
        }

        private void centerContent() {
            // Ibutang sa tunga ang title ug text area dynamically
            int panelWidth = getWidth();
            int panelHeight = getHeight();

            int textWidth = panelWidth - 200;
            int textHeight = panelHeight - 200;

            titleLabel.setBounds(0, 100, panelWidth, 50);
            scrollPane.setBounds((panelWidth - textWidth) / 2, 180, textWidth, textHeight);
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.setColor(Color.WHITE);

            // Background stars
            for (int i = 0; i < 150; i++) {
                int x = (int) (Math.random() * getWidth());
                int y = (int) (Math.random() * getHeight());
                g.fillRect(x, y, 2, 2);
            }
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            repaint(); // I-refresh para mu-glow ang mga bituon
        }
    }
}
